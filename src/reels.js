// File: src/reels.js
import { loadConfig, saveConfig } from './configLoader.js';
import { postToFacebook } from './poster.js';
import { loadLogEntries, isLinkPosted, isTitleSimilarToLog, saveLogEntry } from './logger.js';
import { crawlVideoSources, downloadYouTubeVideo } from './videoScraper.js'; 
import { classifyTopic } from './topicModeler.js';
import { extractKeywords } from './keywords.js';

// Bi·∫øn ƒë·ªÉ ki·ªÉm so√°t v√≤ng l·∫∑p ch·∫°y/d·ª´ng
let isReelsRunning = false;
let videoQueue = [];
let postIntervalId = null;
let lastPostTimestamp = 0;

// H√†m g·ª≠i log v·ªÅ ti·∫øn tr√¨nh ch√≠nh
function sendLog(message, type = 'info', content = null) {
  if (process.send) {
    process.send({ type: 'log', message: message, contentType: type, content: content });
  } else {
    console.log(message);
  }
}

async function startReelsLoop() {
    if (!isReelsRunning) {
        sendLog('üõë Lu·ªìng c√†o video ƒë√£ nh·∫≠n l·ªánh d·ª´ng v√† tho√°t.');
        process.send({ type: 'reels-status', message: 'stopped' });
        process.exit(0);
    }
    
    sendLog(`\nüîÑ B·∫Øt ƒë·∫ßu chu k·ª≥ c√†o video m·ªõi [${new Date().toLocaleString()}]`);

    const config = loadConfig();
    const { videoSources, DEBUG_MODE_REELS, VIDEO_CRAWL_LOOP_DELAY_MINUTES } = config;
    const entries = loadLogEntries();
    
    // G·ªçi h√†m c√†o video ƒë√£ ƒë∆∞·ª£c import
    const videos = await crawlVideoSources(videoSources);

    if (videos.length === 0) {
        sendLog('ü§∑‚Äç‚ôÄÔ∏è Kh√¥ng t√¨m th·∫•y video m·ªõi trong chu k·ª≥ n√†y.');
    }

    let videosProcessedInCycle = 0;

    for (const vid of videos) {
        if (!isReelsRunning) {
            sendLog('üõë Lu·ªìng c√†o video ƒë√£ nh·∫≠n l·ªánh d·ª´ng. ƒêang ho√†n t·∫•t chu k·ª≥ hi·ªán t·∫°i...');
            break;
        }

        if (isLinkPosted(vid.link, entries) || isTitleSimilarToLog(vid.title, entries)) {
            sendLog(`‚è≠Ô∏è  B·ªè qua (ƒë√£ x·ª≠ l√Ω/ƒëƒÉng): ${vid.link}`);
            continue;
        }

        try {
            sendLog(`‚úÖ T√¨m th·∫•y video m·ªõi: ${vid.title}`);
            
            // T·∫£i video
            const videoBuffer = await downloadYouTubeVideo(vid.link);

            if (!videoBuffer) {
                sendLog(`‚ùå Kh√¥ng th·ªÉ t·∫£i video: ${vid.link}`, 'error');
                continue;
            }

            // D√πng AI ƒë·ªÉ t·∫°o caption v√† hashtag
            const captionContent = `Ti√™u ƒë·ªÅ: ${vid.title}\nM√¥ t·∫£: ${vid.description}`;
            const topics = await classifyTopic(captionContent, config);
            const hashtags = await extractKeywords(captionContent, config);
            
            let finalCaption = `üî• ${vid.title}\n\n`;
            if (vid.description) {
                finalCaption += `${vid.description.trim()}\n\n`;
            }
            if (hashtags.length > 0) {
                finalCaption += `\n\n${hashtags.map(tag => `#${tag.replace(/#/g, '')}`).join(' ')}`;
            }
            
            videoQueue.push({
                content: finalCaption,
                media: [{ buffer: videoBuffer, filename: 'video.mp4' }],
                link: vid.link,
                title: vid.title
            });
            videosProcessedInCycle++;
            sendLog(`‚úÖ Video "${vid.title}" ƒë√£ ƒë∆∞·ª£c th√™m v√†o h√†ng ch·ªù ƒëƒÉng (${videoQueue.length} video).`);

            process.send({
                type: 'new-video-content',
                content: {
                    title: vid.title,
                    caption: finalCaption,
                    link: vid.link
                }
            });

        } catch (err) {
            sendLog(`‚ùå L·ªói x·ª≠ l√Ω video "${vid.title}": ${err.message}`, 'error');
            continue;
        }
    }
    
    sendLog(`üèÅ Ho√†n th√†nh chu k·ª≥ c√†o video. ƒê√£ x·ª≠ l√Ω ${videosProcessedInCycle} video.`);

    const crawlDelayMs = (config.VIDEO_CRAWL_LOOP_DELAY_MINUTES || 30) * 60 * 1000;
    sendLog(`‚è≥ ƒêang ch·ªù ${crawlDelayMs / 60000} ph√∫t tr∆∞·ªõc khi c√†o video ti·∫øp theo...`);
    setTimeout(startReelsLoop, crawlDelayMs);
}

// H√†m x·ª≠ l√Ω h√†ng ch·ªù ƒëƒÉng video
async function processVideoQueue() {
    const config = loadConfig();
    const { VIDEO_POST_INTERVAL_MINUTES, DEBUG_MODE_REELS } = config;

    if (!isReelsRunning && videoQueue.length === 0) {
        return;
    }

    const currentTime = Date.now();
    const requiredIntervalMs = (VIDEO_POST_INTERVAL_MINUTES || 15) * 60 * 1000;

    if (currentTime - lastPostTimestamp < requiredIntervalMs) {
        const remainingMinutes = Math.round((requiredIntervalMs - (currentTime - lastPostTimestamp)) / 1000 / 60);
        sendLog(`‚è≥ ƒêang ch·ªù ${remainingMinutes} ph√∫t n·ªØa ƒë·ªÉ ƒëƒÉng video ti·∫øp theo. (${videoQueue.length} video trong h√†ng ch·ªù)`);
        return;
    }

    if (videoQueue.length > 0) {
        const videoItem = videoQueue.shift();
        sendLog(`‚ú® Chu·∫©n b·ªã x·ª≠ l√Ω video t·ª´ h√†ng ch·ªù: "${videoItem.title}"`);

        if (DEBUG_MODE_REELS) {
            sendLog(`‚û°Ô∏è  Ch·∫ø ƒë·ªô DEBUG: B·ªè qua ƒëƒÉng video th·∫≠t l√™n Facebook.`, 'info');
            lastPostTimestamp = currentTime;
            return;
        }

        try {
            const post = await postToFacebook(videoItem.content, videoItem.media, config);
            if (!post || !post.id) {
                sendLog("‚ùå ƒêƒÉng video th·∫•t b·∫°i t·ª´ h√†ng ch·ªù, kh√¥ng nh·∫≠n ƒë∆∞·ª£c post ID.", 'error');
                return;
            }

            sendLog(`‚úÖ ƒêƒÉng th√†nh c√¥ng l√™n Facebook v·ªõi Post ID: ${post.id}`);
            saveLogEntry({ link: videoItem.link, title: videoItem.title });
            process.send({ type: 'reels-post-success', content: { link: videoItem.link, postId: post.id } });
            lastPostTimestamp = currentTime;

        } catch (error) {
            let errorMessage = `‚ùå L·ªói khi ƒëƒÉng video "${videoItem.title}": ${error.message}`;
            sendLog(errorMessage, 'error');
            console.error("L·ªói chi ti·∫øt khi ƒëƒÉng video:", error.response?.data?.error || error);
        }
    } else {
        sendLog('üì≠ H√†ng ch·ªù ƒëƒÉng video tr·ªëng.');
    }
}
// L·∫Øng nghe tin nh·∫Øn t·ª´ ti·∫øn tr√¨nh ch√≠nh
process.on('message', (msg) => {
    if (msg.command === 'start-reels') {
        if (!isReelsRunning) {
            isReelsRunning = true;
            const updatedConfig = { ...loadConfig(), ...msg.config };
            saveConfig(updatedConfig);
            startReelsLoop();
            if (postIntervalId) clearInterval(postIntervalId);
            postIntervalId = setInterval(processVideoQueue, 60 * 1000);
            sendLog('Ti·∫øn tr√¨nh c√†o v√† l·∫≠p l·ªãch ƒëƒÉng video ƒë√£ kh·ªüi ƒë·ªông.');
        }
    } else if (msg.command === 'stop-reels') {
        isReelsRunning = false;
        sendLog('üõë ƒê√£ nh·∫≠n l·ªánh d·ª´ng lu·ªìng video. ƒêang ho√†n t·∫•t chu k·ª≥ hi·ªán t·∫°i...');
    }
});