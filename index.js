// index.js
process.stdout.write('\x1b[0m'); // reset
process.stdout.setDefaultEncoding('utf8');
import crypto from 'crypto';
import axios from 'axios';
import { loadConfig, saveConfig } from './src/configLoader.js';
import { crawlSources, fetchArticleContent, fetchArticleImages  } from './src/crawler.js';
import { rewriteContent, RateLimitError  } from './src/rewrite.js'; // Import RateLimitError
import { rewriteManual } from './src/rewrite_manual.js';
import { classifyTopic } from './src/topicModeler.js';
import { extractKeywords } from './src/keywords.js';
import { overlayLogo } from './src/quoteOverlay.js'; 
import { analyzeTrendingTopics } from './src/trendAnalyzer.js';
import { postToFacebook, reactToFacebook, postStoryWithLink  } from './src/poster.js';
import {
  loadLogEntries,
  isLinkPosted,
  isTitleSimilarToLog,
  isImageHashPosted,
  saveLogEntry,
} from './src/logger.js';
import { postProcessText } from './src/textProcessor.js'; // Import postProcessText


const HASH_ALGO = 'md5';

function getImageHash(img) {
  const h = crypto.createHash(HASH_ALGO);
  if (Buffer.isBuffer(img)) h.update(img);
  else h.update(img.toString());
  return h.digest('hex');
}

function incrementUsed(config) {
  config.USED = (config.USED || 0) + 1;
  saveConfig(config);
  sendLog(`üìà USED +1 ‚Üí Hi·ªán t·∫°i: ${config.USED}`);
}

// Bi·∫øn ƒë·ªÉ ki·ªÉm so√°t v√≤ng l·∫∑p ch·∫°y/d·ª´ng
let isCrawlingRunning = false;
let postQueue = []; // H√†ng ch·ªù ch·ª©a c√°c b√†i vi·∫øt ƒë√£ x·ª≠ l√Ω s·∫µn s√†ng ƒë·ªÉ ƒëƒÉng
let postIntervalId = null; // ID c·ªßa setInterval ƒë·ªÉ x·ª≠ l√Ω h√†ng ch·ªù ƒëƒÉng b√†i
let lastPostTimestamp = 0; // Timestamp c·ªßa l·∫ßn ƒëƒÉng b√†i th√†nh c√¥ng g·∫ßn nh·∫•t

// H√†m g·ª≠i log v·ªÅ ti·∫øn tr√¨nh ch√≠nh (main.mjs)
function sendLog(message, type = 'info', content = null) {
  if (process.send) {
    process.send({ type: 'log', message: message, contentType: type, content: content });
  } else {
    console.log(message);
  }
}

// H√†m ch√≠nh c·ªßa lu·ªìng c√†o b√†i li√™n t·ª•c
async function startCrawlingLoop() {
  if (!isCrawlingRunning) {
    sendLog('üõë Lu·ªìng c√†o b√†i ƒë√£ nh·∫≠n l·ªánh d·ª´ng v√† tho√°t.');
    process.send({ type: 'status', message: 'stopped' });
    process.exit(0);
  }
  
  sendLog(`\nüîÑ B·∫Øt ƒë·∫ßu chu k·ª≥ c√†o b√†i m·ªõi [${new Date().toLocaleString()}]`);

  const config = loadConfig();
  const { REWRITE_MODE, DEBUG_MODE, sources, LOGO_PATH, CRAWL_LOOP_DELAY_MINUTES } = config;
  sendLog(`‚öôÔ∏è  Ch·∫ø ƒë·ªô: ${REWRITE_MODE} | DEBUG: ${DEBUG_MODE}`);

  const trends = analyzeTrendingTopics(2, 5);
  if(trends.length > 0) {
    sendLog('üî• Hot Topics g·∫ßn ƒë√¢y: ' + trends.map(t => `${t.topic} (${t.count})`).join(', '));
  }

  const entries = loadLogEntries();
  const seenLinks = new Set();
  const articles = await crawlSources(sources);

  if (articles.length === 0) {
    sendLog('ü§∑‚Äç‚ôÄÔ∏è Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt m·ªõi trong chu k·ª≥ n√†y.');
  }

  let articlesProcessedInCycle = 0;

  for (const art of articles) {
    if (!isCrawlingRunning) {
      sendLog('üõë Lu·ªìng c√†o b√†i ƒë√£ nh·∫≠n l·ªánh d·ª´ng. ƒêang ho√†n t·∫•t chu k·ª≥ hi·ªán t·∫°i...');
      break;
    }

    const { title, link, images } = art;

    if (!title || !link) {
      sendLog(`‚ö†Ô∏è B·ªè qua b√†i vi·∫øt thi·∫øu ti√™u ƒë·ªÅ ho·∫∑c link.`);
      continue;
    }
    if (seenLinks.has(link) || isLinkPosted(link, entries)) {
      sendLog(`‚è≠Ô∏è  B·ªè qua (ƒë√£ x·ª≠ l√Ω/ƒëƒÉng): ${link}`);
      continue;
    }
    seenLinks.add(link);

    if (isTitleSimilarToLog(title, entries)) {
      sendLog(`‚è≠Ô∏è  Ti√™u ƒë·ªÅ g·∫ßn gi·ªëng b√†i c≈©: ${title}`);
      continue;
    }

    // === PH·∫¶N N√ÇNG C·∫§P KI·ªÇM TRA TR√ôNG L·∫∂P H√åNH ·∫¢NH ===
    let allImages = [];
    if (images && images.length > 0) {
        // C·ªë g·∫Øng l·∫•y th√™m ·∫£nh t·ª´ n·ªôi dung b√†i vi·∫øt
        const articleImages = await fetchArticleImages(link);
        allImages = [...new Set([...images, ...articleImages])];
    }
    
    // Check for duplicate image hash BEFORE any processing
    let foundDuplicateImage = false;
    if (allImages.length > 0) {
        for (const imgUrl of allImages) {
            try {
                const res = await axios.get(imgUrl, { responseType: 'arraybuffer', timeout: 5000 });
                const originalImageBuffer = Buffer.from(res.data, 'binary');
                const originalImageHash = getImageHash(originalImageBuffer);
                
                if (isImageHashPosted(originalImageHash, entries)) {
                    sendLog(`‚è≠Ô∏è ·∫¢nh g·ªëc "${imgUrl}" tr√πng v·ªõi log c≈©. B·ªè qua to√†n b·ªô b√†i vi·∫øt.`, 'warning');
                    foundDuplicateImage = true;
                    break;
                }
            } catch (err) {
                // Log l·ªói nh∆∞ng kh√¥ng b·ªè qua b√†i vi·∫øt n·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c ·∫£nh ƒë·ªÉ hash
                sendLog(`‚ö†Ô∏è L·ªói t·∫£i ·∫£nh ${imgUrl} ƒë·ªÉ ki·ªÉm tra hash: ${err.message}. Ti·∫øp t·ª•c x·ª≠ l√Ω.`, 'warning');
            }
        }
    }

    if (foundDuplicateImage) {
        continue;
    }
    // === K·∫æT TH√öC PH·∫¶N N√ÇNG C·∫§P ===

    let articleContent = await fetchArticleContent(link);
    if (articleContent) {
      articleContent = articleContent.split('\n\n').slice(0, 5).join('\n\n');
    }
    if (!articleContent || articleContent.length < 100) {
      articleContent = title; // Fallback
    }
    
    let rewritten = '';
    let topics = [];
    let hashtags = [];

    if (!isCrawlingRunning) {
      sendLog('üõë ƒê√£ nh·∫≠n l·ªánh d·ª´ng. B·ªè qua c√°c b∆∞·ªõc x·ª≠ l√Ω AI.', 'warning');
      break;
    }

    try {
      if (REWRITE_MODE === 'ai') {
        sendLog('ü§ñ Ch·∫ø ƒë·ªô AI: ƒêang vi·∫øt l·∫°i, ph√¢n lo·∫°i v√† t·∫°o hashtag...');
        try {
          rewritten = await rewriteContent({ title, link, originalContent: articleContent }, config);
        } catch (error) {
          if (error instanceof RateLimitError) {
            sendLog('‚è≥ H·∫øt l∆∞·ª£t AI. ƒêang th·ª≠ l·∫°i b·∫±ng thu·∫≠t to√°n...', 'warning');
            rewritten = await rewriteManual({ title, link, originalContent: articleContent });
          } else {
            sendLog(`‚ùå L·ªói khi vi·∫øt l·∫°i AI cho b√†i "${title}": ${error.message}`, 'error');
            console.error(error);
            continue;
          }
        }

        if (!rewritten) {
          sendLog(`‚ö†Ô∏è B·ªè qua b√†i vi·∫øt "${title}" do kh√¥ng th·ªÉ vi·∫øt l·∫°i.`, 'warning');
          continue;
        }

        topics = await classifyTopic(`${title}\n\n${articleContent}`, config);
        hashtags = await extractKeywords(rewritten, config);

      } else { // 'manual' mode
        sendLog('‚úçÔ∏è Ch·∫ø ƒë·ªô Thu·∫≠t to√°n: ƒêang t√≥m t·∫Øt c∆° b·∫£n...');
        const manualResult = await rewriteManual({ title, link, originalContent: articleContent });
        rewritten = manualResult.replace(/<br>/g, '\n').replace(/<[^>]*>/g, '');
      }
    } catch (error) {
      let errorMessage = `‚ùå L·ªói khi vi·∫øt l·∫°i/ph√¢n t√≠ch AI cho b√†i "${title}": ${error.message}`;
      if (error instanceof RateLimitError) {
        errorMessage = `‚è≥ H·∫øt l∆∞·ª£t AI ho·∫∑c qu√° t·∫£i. ƒê√£ chuy·ªÉn sang ch·∫ø ƒë·ªô Thu·∫≠t to√°n cho b√†i n√†y.`;
        rewritten = await rewriteManual({ title, link, originalContent: articleContent });
      }
      sendLog(errorMessage, 'error');
      console.error(error);
    }

    let processedText = postProcessText(rewritten);
    const validatedContent = validateAndFixContent(processedText);

    if (!validatedContent) {
      sendLog(`‚ö†Ô∏è B√†i vi·∫øt "${title}" kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán ƒë·ªãnh d·∫°ng. B·ªè qua.`, 'warning');
      continue;
    }

    rewritten = validatedContent;

    if (hashtags.length > 0) {
      rewritten += `\n\n${hashtags.map(tag => `#${tag.replace(/#/g, '')}`).join(' ')}`;
    }

    let mediaPayload = [];
    let firstProcessedImageHash = null;

    if (allImages.length > 0) {
      const imageProcessingResults = await Promise.all(
          allImages.slice(0, 5).map(async (imgUrl, index) => {
              try {
                  const buffer = await overlayLogo(imgUrl, LOGO_PATH);
                  if (buffer) {
                      const hash = getImageHash(buffer);
                      if (index === 0) {
                          firstProcessedImageHash = hash;
                      }
                      return { buffer, filename: `image_${index}.png` };
                  }
              } catch (err) {
                  sendLog(`‚ö†Ô∏è L·ªói x·ª≠ l√Ω ·∫£nh ${imgUrl} (index ${index}): ${err.message}. B·ªè qua ·∫£nh n√†y.`, 'warning');
                  return null;
              }
          })
      );
      mediaPayload = imageProcessingResults.filter(item => item !== null);
    }

    if (rewritten && mediaPayload.length > 0) {
      postQueue.push({
        content: rewritten,
        media: mediaPayload,
        link: link,
        title: title,
        imgHash: firstProcessedImageHash,
        topics: topics,
        hashtags: hashtags,
        rawImages: allImages
      });
      articlesProcessedInCycle++;
      sendLog(`‚úÖ B√†i vi·∫øt "${title}" ƒë√£ ƒë∆∞·ª£c th√™m v√†o h√†ng ch·ªù ƒëƒÉng (${postQueue.length} b√†i).`);
      process.send({
        type: 'new-content',
        content: {
          title: title,
          rewritten: rewritten,
          images: allImages,
          link: link
        }
      });
    } else {
      sendLog(`‚ö†Ô∏è B√†i vi·∫øt "${title}" kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán ƒë·ªÉ th√™m v√†o h√†ng ch·ªù (thi·∫øu n·ªôi dung/·∫£nh).`, 'warning');
    }

    await new Promise(resolve => setTimeout(resolve, 5000));
  }
  
  sendLog(`üèÅ Ho√†n th√†nh chu k·ª≥ c√†o b√†i. ƒê√£ x·ª≠ l√Ω ${articlesProcessedInCycle} b√†i vi·∫øt.`);
  const crawlDelayMs = (CRAWL_LOOP_DELAY_MINUTES || 15) * 60 * 1000;
  sendLog(`‚è≥ ƒêang ch·ªù ${crawlDelayMs / 60000} ph√∫t tr∆∞·ªõc khi c√†o b√†i ti·∫øp theo...`);
  setTimeout(startCrawlingLoop, crawlDelayMs);
}

// H√†m x·ª≠ l√Ω h√†ng ch·ªù ƒëƒÉng b√†i theo kho·∫£ng th·ªùi gian
async function processPostQueue() {
  const config = loadConfig();
  const { POST_INTERVAL_MINUTES, DEBUG_MODE } = config;

  if (!isCrawlingRunning && postQueue.length === 0) {
    return;
  }

  const currentTime = Date.now();
  const requiredIntervalMs = (POST_INTERVAL_MINUTES || 1) * 60 * 1000;

  if (currentTime - lastPostTimestamp < requiredIntervalMs) {
    const remainingMinutes = Math.round((requiredIntervalMs - (currentTime - lastPostTimestamp)) / 1000 / 60);
    sendLog(`‚è≥ ƒêang ch·ªù ${remainingMinutes} ph√∫t n·ªØa ƒë·ªÉ ƒëƒÉng b√†i ti·∫øp theo. (${postQueue.length} b√†i trong h√†ng ch·ªù)`);
    return;
  }

  if (postQueue.length > 0) {
    const postItem = postQueue.shift();
    sendLog(`‚ú® Chu·∫©n b·ªã x·ª≠ l√Ω b√†i t·ª´ h√†ng ch·ªù: "${postItem.title}"`);

    if (DEBUG_MODE) {
        sendLog(`‚û°Ô∏è  Ch·∫ø ƒë·ªô DEBUG: B·ªè qua ƒëƒÉng b√†i th·∫≠t l√™n Facebook.`, 'info');
        lastPostTimestamp = currentTime;
        return;
    }

    try {
        const post = await postToFacebook(postItem.content, postItem.media, config);
        if (!post || !post.id) {
            sendLog("‚ùå ƒêƒÉng b√†i th·∫•t b·∫°i t·ª´ h√†ng ch·ªù, kh√¥ng nh·∫≠n ƒë∆∞·ª£c post ID. (Xem log chi ti·∫øt).", 'error');
            console.error("L·ªói ƒëƒÉng b√†i FB (kh√¥ng c√≥ ID):", post);
            return;
        }

        sendLog(`‚úÖ ƒêƒÉng th√†nh c√¥ng l√™n Facebook v·ªõi Post ID: ${post.id}`);

        // T∆∞∆°ng t√°c sau khi ƒëƒÉng b√†i
        if (config.AUTO_LIKE_POSTS) {
            await reactToFacebook(post.id, 'LIKE', config);
            sendLog(`üëç ƒê√£ t·ª± ƒë·ªông Like b√†i vi·∫øt ${post.id}.`);
        }

        // L√™n l·ªãch ki·ªÉm tra v√† th·∫£ c·∫£m x√∫c cho b√¨nh lu·∫≠n
        if (config.AUTO_REACT_COMMENTS) {
            const delay = (config.AUTO_REACT_COMMENT_DELAY_SECONDS || 60) * 1000;
            setTimeout(async () => {
                await handleCommentReactions(post.id, config);
            }, delay);
            sendLog(`‚è∞ S·∫Ω ki·ªÉm tra v√† th·∫£ c·∫£m x√∫c cho b√¨nh lu·∫≠n sau ${(delay / 1000)} gi√¢y.`);
        }
        await postToFacebook(`${postItem.link}`, [], config, post.id);

        if (config.SHARE_POST_TO_STORY && postItem.rawImages && postItem.rawImages.length > 0) {
            const postUrl = `https://www.facebook.com/${config.FB_PAGE_ID}/posts/${post.id}`;
            const imageUrl = postItem.rawImages[0]; // L·∫•y ·∫£nh ƒë·∫ßu ti√™n c·ªßa b√†i vi·∫øt
            try {
                await postStoryWithLink(imageUrl, postUrl, config);
                sendLog(`üì∏ ƒê√£ chia s·∫ª b√†i vi·∫øt l√™n 'Tin c·ªßa b·∫°n'.`);
            } catch (err) {
                sendLog(`‚ùå L·ªói khi chia s·∫ª l√™n Story: ${err.message}`, 'error');
            }
        }
        saveLogEntry({
            link: postItem.link,
            title: postItem.title,
            rewritten: postItem.content,
            image: postItem.rawImage,
            imgHash: postItem.imgHash,
            topics: postItem.topics,
            hashtags: postItem.hashtags
        });

        //  G·ª≠i th√¥ng ƒëi·ªáp sau khi ƒëƒÉng th√†nh c√¥ng v√† l∆∞u log
        process.send({
          type: 'post-success',
          content: { link: postItem.link, postId: post.id }
        });

        if (config.REWRITE_MODE === 'ai') {
            incrementUsed(config);
        }
        lastPostTimestamp = currentTime;
    } catch (error) {
        let errorMessage = `‚ùå L·ªói khi ƒëƒÉng b√†i "${postItem.title}": ${error.message}`;
        sendLog(errorMessage, 'error');
        console.error("L·ªói chi ti·∫øt khi ƒëƒÉng b√†i:", error.response?.data?.error || error);
    }
  } else {
    sendLog('üì≠ H√†ng ch·ªù ƒëƒÉng b√†i tr·ªëng.');
  }
}

// L·∫Øng nghe tin nh·∫Øn t·ª´ ti·∫øn tr√¨nh ch√≠nh (main.mjs)
process.on('message', (msg) => {
  if (msg.command === 'start') {
    if (!isCrawlingRunning) {
      isCrawlingRunning = true;
      startCrawlingLoop(); // B·∫Øt ƒë·∫ßu lu·ªìng c√†o b√†i
      // B·∫Øt ƒë·∫ßu ki·ªÉm tra h√†ng ch·ªù ƒëƒÉng b√†i m·ªói ph√∫t
      if (postIntervalId) clearInterval(postIntervalId); // X√≥a n·∫øu ƒë√£ c√≥
      postIntervalId = setInterval(processPostQueue, 60 * 1000); // Ki·ªÉm tra h√†ng ch·ªù m·ªói ph√∫t
      sendLog('Ti·∫øn tr√¨nh c√†o v√† l·∫≠p l·ªãch ƒëƒÉng b√†i ƒë√£ kh·ªüi ƒë·ªông.');
    }
  } else if (msg.command === 'stop') {
    isCrawlingRunning = false;
    sendLog('üõë ƒê√£ nh·∫≠n l·ªánh d·ª´ng. ƒêang ho√†n t·∫•t chu k·ª≥ hi·ªán t·∫°i...');
  }
  else if (msg.command === 'remove-post') {
    const linkToRemove = msg.link;
    const initialLength = postQueue.length;
    postQueue = postQueue.filter(post => post.link !== linkToRemove);
    if (postQueue.length < initialLength) {
        console.log(`‚úÖ ƒê√£ x√≥a b√†i vi·∫øt c√≥ link: ${linkToRemove}`);
        // G·ª≠i th√¥ng b√°o th√†nh c√¥ng v·ªÅ renderer n·∫øu c·∫ßn
        process.send({ type: 'log', message: `‚úÖ ƒê√£ x√≥a b√†i vi·∫øt kh·ªèi h√†ng ch·ªù.`, contentType: 'success' });
    }
  }
});
async function handleCommentReactions(postId, config) {
    try {
        const { FB_PAGE_TOKEN, FB_GRAPH_API_VERSION, COMMENT_REACTION_TYPE } = config;
        const url = `https://graph.facebook.com/${FB_GRAPH_API_VERSION}/${postId}/comments`;
        
        const res = await axios.get(url, { params: { access_token: FB_PAGE_TOKEN } });
        const comments = res.data.data;

        if (comments && comments.length > 0) {
            sendLog(`üí¨ T√¨m th·∫•y ${comments.length} b√¨nh lu·∫≠n tr√™n b√†i vi·∫øt ${postId}. ƒêang b·∫Øt ƒë·∫ßu t∆∞∆°ng t√°c...`);
            for (const comment of comments) {
                // T·ª± ƒë·ªông th·∫£ c·∫£m x√∫c cho t·∫•t c·∫£ c√°c b√¨nh lu·∫≠n
                await reactToFacebook(comment.id, COMMENT_REACTION_TYPE || 'LOVE', config);
                sendLog(`üíñ ƒê√£ th·∫£ c·∫£m x√∫c "${COMMENT_REACTION_TYPE || 'LOVE'}" v√†o b√¨nh lu·∫≠n c·ªßa user ID: ${comment.from.id}`);
            }
        } else {
            sendLog(`ü§∑‚Äç‚ôÇÔ∏è Kh√¥ng c√≥ b√¨nh lu·∫≠n n√†o ƒë·ªÉ t∆∞∆°ng t√°c tr√™n b√†i vi·∫øt ${postId}.`);
        }
    } catch (error) {
        console.error('‚ùå L·ªói khi x·ª≠ l√Ω b√¨nh lu·∫≠n:', error.response?.data?.error?.message || error.message);
    }
}
/**
 * Chu·∫©n h√≥a v√† ƒë·ªãnh d·∫°ng n·ªôi dung ƒë∆∞·ª£c t·∫°o b·ªüi AI.
 * N·ªôi dung s·∫Ω ƒë∆∞·ª£c t√°ch th√†nh Ti√™u ƒë·ªÅ, T√≥m t·∫Øt, Th√¢n b√†i v√† C√¢u h·ªèi.
 * C√°c ph·∫ßn s·∫Ω ƒë∆∞·ª£c n·ªëi l·∫°i v·ªõi nhau, m·ªói ph·∫ßn c√°ch nhau m·ªôt d√≤ng tr·ªëng.
 *
 * @param {string} aiGeneratedContent N·ªôi dung vƒÉn b·∫£n th√¥ ƒë∆∞·ª£c t·∫°o b·ªüi AI.
 * @returns {string|null} N·ªôi dung ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng ho·∫∑c null n·∫øu kh√¥ng h·ª£p l·ªá.
 */
/**
 * Chu·∫©n h√≥a v√† ƒë·ªãnh d·∫°ng n·ªôi dung ƒë∆∞·ª£c t·∫°o b·ªüi AI.
 * N·ªôi dung s·∫Ω ƒë∆∞·ª£c t√°ch th√†nh Ti√™u ƒë·ªÅ, T√≥m t·∫Øt, Th√¢n b√†i v√† C√¢u h·ªèi.
 * C√°c ph·∫ßn s·∫Ω ƒë∆∞·ª£c n·ªëi l·∫°i v·ªõi nhau, m·ªói ph·∫ßn c√°ch nhau m·ªôt d√≤ng tr·ªëng.
 *
 * @param {string} aiGeneratedContent N·ªôi dung vƒÉn b·∫£n th√¥ ƒë∆∞·ª£c t·∫°o b·ªüi AI.
 * @returns {string|null} N·ªôi dung ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng ho·∫∑c null n·∫øu kh√¥ng h·ª£p l·ªá.
 */
function validateAndFixContent(aiGeneratedContent) {
  // B∆∞·ªõc 1: Ki·ªÉm tra ƒë·∫ßu v√†o.
  if (!aiGeneratedContent || typeof aiGeneratedContent !== 'string') {
    return null;
  }

  let title, summary, body = '', question = null;

  // B∆∞·ªõc 2: T√°ch n·ªôi dung d·ª±a tr√™n c·∫•u tr√∫c ƒë√£ cho.
  // ∆Øu ti√™n t√°ch d·ª±a tr√™n c·∫∑p d·∫•u **
  const partsByBold = aiGeneratedContent.split('**');

  if (partsByBold.length >= 3) {
    // T√°ch th√†nh Ti√™u ƒë·ªÅ, T√≥m t·∫Øt v√† Ph·∫ßn c√≤n l·∫°i.
    title = partsByBold[0].trim();
    summary = `**${partsByBold[1].trim()}**`;
    const restOfContent = partsByBold.slice(2).join('**').trim();

    // T√°ch ph·∫ßn th√¢n b√†i v√† c√¢u h·ªèi cu·ªëi c√πng
    const restOfContentLines = restOfContent.split('\n\n');
    const lastLine = restOfContentLines[restOfContentLines.length - 1];
    
    if (lastLine && lastLine.trim().endsWith('?')) {
      question = restOfContentLines.pop();
    }
    body = restOfContentLines.join(' '); // N·ªëi c√°c ƒëo·∫°n th√†nh m·ªôt chu·ªói duy nh·∫•t ƒë·ªÉ d·ªÖ x·ª≠ l√Ω

  } else {
    // Logic d·ª± ph√≤ng n·∫øu kh√¥ng t√¨m th·∫•y **
    // T√°ch c√°c ƒëo·∫°n d·ª±a tr√™n d·∫•u xu·ªëng d√≤ng
    let parts = aiGeneratedContent.split('\n\n').filter(p => p.trim() !== '');

    if (parts.length < 3) {
      // N·∫øu kh√¥ng ƒë·ªß ƒëo·∫°n, th·ª≠ t√°ch d·ª±a tr√™n d·∫•u c√¢u
      const processedText = parts.join(' ').replace(/([.!?])\s*(?=[A-Z√Ä-·ª∏])/g, '$1\n\n');
      parts = processedText.split('\n\n').filter(p => p.trim() !== '');
    }
    
    if (parts.length < 3) {
      return null;
    }
    
    // T√°ch c√°c ph·∫ßn
    let [tempTitle, tempSummary, ...restOfContent] = parts;
    title = tempTitle;
    summary = `**${tempSummary.replace(/\*\*/g, '').trim()}**`;
    
    let restOfContentLines = restOfContent;
    for (let i = restOfContentLines.length - 1; i >= 0; i--) {
      if (restOfContentLines[i].trim().endsWith('?')) {
        question = restOfContentLines.splice(i, 1)[0];
        break;
      }
    }
    body = restOfContentLines.join(' '); // N·ªëi c√°c ƒëo·∫°n th√†nh m·ªôt chu·ªói duy nh·∫•t ƒë·ªÉ d·ªÖ x·ª≠ l√Ω
  }

  // B∆∞·ªõc 3: Chu·∫©n h√≥a c√°c ph·∫ßn n·ªôi dung
  // ƒê·∫£m b·∫£o ti√™u ƒë·ªÅ lu√¥n in hoa v√† kh√¥ng c√≥ d·∫•u k·∫øt th√∫c c√¢u.
  if (!title) {
    return null;
  }
  title = title.toUpperCase().replace(/[.!?]$/, '').trim();
  
  // Thay th·∫ø c√°c d·∫•u k·∫øt th√∫c c√¢u b·∫±ng hai d·∫•u xu·ªëng d√≤ng ƒë·ªÉ t·∫°o kho·∫£ng tr·∫Øng
  if (body) {
    // Th√™m m·ªôt d·∫•u c√°ch sau d·∫•u k·∫øt th√∫c c√¢u ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh ƒë·ªìng nh·∫•t tr∆∞·ªõc khi x·ª≠ l√Ω
    body = body.replace(/([.!?])([A-Z√Ä-·ª∏])/g, '$1 $2');
    // B√¢y gi·ªù, thay th·∫ø t·∫•t c·∫£ c√°c d·∫•u k·∫øt th√∫c c√¢u b·∫±ng ch√≠nh n√≥, sau ƒë√≥ l√† hai d·∫•u xu·ªëng d√≤ng
    body = body.replace(/([.!?])\s/g, '$1\n\n\n');
  }

  // B∆∞·ªõc 4: Gh√©p c√°c ph·∫ßn n·ªôi dung l·∫°i v·ªõi nhau
  const result = [title, summary];
  if (body) {
    result.push(body);
  }
  if (question) {
    result.push(question);
  }
  result.push('üìå Link b√†i vi·∫øt g·ªëc ·ªü ph·∫ßn b√¨nh lu·∫≠n nh√©!');

  // Cu·ªëi c√πng, n·ªëi t·∫•t c·∫£ c√°c ph·∫ßn ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a b·∫±ng hai d·∫•u xu·ªëng d√≤ng
  return result.filter(Boolean).join('\n\n');
}
